{"version":3,"file":"index.js","sources":["../src/trackingImage.js","../src/utils.js"],"sourcesContent":["const trackingImage = {};\n\n/**\n * Converts a color from a colorspace based on an RGB color model to a\n * grayscale representation of its luminance. The coefficients represent the\n * measured intensity perception of typical trichromat humans, in\n * particular, human vision is most sensitive to green and least sensitive\n * to blue.\n * @param {pixels} pixels The pixels in a linear [r,g,b,a,...] array.\n * @param {number} width The image width.\n * @param {number} height The image height.\n * @param {boolean} fillRGBA If the result should fill all RGBA values with the gray scale\n *  values, instead of returning a single value per pixel.\n * @param {Uint8ClampedArray} The grayscale pixels in a linear array ([p,p,p,a,...] if fillRGBA\n *  is true and [p1, p2, p3, ...] if fillRGBA is false).\n * @static\n */\ntrackingImage.grayscale = function (pixels, width, height, fillRGBA) {\n\tvar gray = new Uint8ClampedArray(\n\t\tfillRGBA ? pixels.length : pixels.length >> 2\n\t);\n\tvar p = 0;\n\tvar w = 0;\n\tfor (var i = 0; i < height; i++) {\n\t\tfor (var j = 0; j < width; j++) {\n\t\t\tvar value =\n\t\t\t\tpixels[w] * 0.299 + pixels[w + 1] * 0.587 + pixels[w + 2] * 0.114;\n\t\t\tgray[p++] = value;\n\n\t\t\tif (fillRGBA) {\n\t\t\t\tgray[p++] = value;\n\t\t\t\tgray[p++] = value;\n\t\t\t\tgray[p++] = pixels[w + 3];\n\t\t\t}\n\n\t\t\tw += 4;\n\t\t}\n\t}\n\treturn gray;\n};\n\n\nexport default trackingImage;","import trackingImage from \"./trackingImage.js\";\n\nconst getEnvironment = () => {\n\tconst ua = window?.navigator?.userAgent?.toLowerCase();\n\tconst isWeixin = ua.indexOf(\"micromessenger\") !== -1 || ua.indexOf(\"wechat\") !== -1 || (!!window.wx && !window.Image);\n\tconst isInApp = /(^|;\\s)app\\//.test(ua);\n\tif (isWeixin) {\n\t\tif (window?.__wxjs_environment === \"miniprogram\" || !!window?.__wxAppCode__) {\n\t\t\treturn \"wxapp\";\n\t\t} else {\n\t\t\treturn \"wxh5\";\n\t\t}\n\t} else {\n\t\tif (!isInApp) {\n\t\t\treturn \"browser\";\n\t\t} else {\n\t\t\treturn \"app\";\n\t\t}\n\t}\n};\n\nconst imageDetect = () => {\n\t// const tracking = window.tracking;\n\tconst env = getEnvironment();\n\t/**\n\t * @param { String } url 图片url 本地资源路径。。。\n\t * @return { Promise } promiseObject resolve({brightness: Number,isGray: Boolean,isBright: Boolean,})\n\t * @description 检测图片的明暗度，返回一个promise，返回值为一个对象，包含brightness: Number,isGray: Boolean,isBright: Boolean；brightness: 明暗值，isGray：是否过暗，isBright：是否过亮\n\t */\n\tconst checkLuminance = (url) => {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (env === \"wxapp\") {\n\t\t\t\ttry {\n\t\t\t\t\twx.getImageInfo({\n\t\t\t\t\t\tsrc: url,\n\t\t\t\t\t\tsuccess: async (res) => {\n\t\t\t\t\t\t\t// 创建离屏canvas\n\t\t\t\t\t\t\tconst canvas = wx?.createOffscreenCanvas({\n\t\t\t\t\t\t\t\ttype: \"2d\",\n\t\t\t\t\t\t\t\twidth: res.width,\n\t\t\t\t\t\t\t\theight: res.height,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tconst context = canvas?.getContext(\"2d\");\n\t\t\t\t\t\t\tconst image = canvas?.createImage();\n\t\t\t\t\t\t\t// 等待图片加载\n\t\t\t\t\t\t\tawait new Promise((resolve) => {\n\t\t\t\t\t\t\t\timage.src = url; // 要加载的图片 url\n\t\t\t\t\t\t\t\timage.onload = resolve;\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tcontext.drawImage(image, 0, 0, res.width, res.height);\n\t\t\t\t\t\t\tconst imgData = context.getImageData(0, 0, res.width, res.height);\n\n\t\t\t\t\t\t\tconst gray = trackingImage.grayscale(\n\t\t\t\t\t\t\t\timgData?.data,\n\t\t\t\t\t\t\t\tres.width,\n\t\t\t\t\t\t\t\tres.height\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t// 计算明暗度\n\t\t\t\t\t\t\tlet brightness = 0;\n\t\t\t\t\t\t\tfor (let i = 0; i < gray.length; i++) {\n\t\t\t\t\t\t\t\tbrightness += gray[i];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbrightness /= gray.length;\n\n\t\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\t\tbrightness,\n\t\t\t\t\t\t\t\tisGray: brightness < 80,\n\t\t\t\t\t\t\t\tisBright: brightness > 150,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t},\n\t\t\t\t\t\tfail: (error) => {\n\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t} catch (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tconst image = new Image();\n\t\t\t\t\timage.src = url;\n\t\t\t\t\timage.onload = () => {\n\t\t\t\t\t\tconst canvas = document.createElement(\"canvas\");\n\t\t\t\t\t\tcanvas.width = image.width || image?.offsetWidth;\n\t\t\t\t\t\tcanvas.height = image.height || image?.offsetHeight;\n\n\t\t\t\t\t\tconst context = canvas.getContext(\"2d\");\n\n\t\t\t\t\t\tcontext.drawImage(image, 0, 0, canvas.width, canvas.height);\n\n\t\t\t\t\t\tconst gray = trackingImage.grayscale(\n\t\t\t\t\t\t\tcontext.getImageData(0, 0, canvas.width, canvas.height)?.data,\n\t\t\t\t\t\t\tcanvas.width,\n\t\t\t\t\t\t\tcanvas.height\n\t\t\t\t\t\t);\n\t\t\t\t\t\t// 计算明暗度\n\t\t\t\t\t\tlet brightness = 0;\n\t\t\t\t\t\tfor (let i = 0; i < gray.length; i++) {\n\t\t\t\t\t\t\tbrightness += gray[i];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbrightness /= gray.length;\n\n\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\tbrightness,\n\t\t\t\t\t\t\tisGray: brightness < 80,\n\t\t\t\t\t\t\tisBright: brightness > 150,\n\t\t\t\t\t\t});\n\t\t\t\t\t};\n\t\t\t\t\timage.onerror = () => {\n\t\t\t\t\t\treject(new Error(\"图片加载失败\"));\n\t\t\t\t\t};\n\t\t\t\t} catch (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n\n\t\t/**\n\t * @param { String } url 图片url 本地资源路径。。。\n\t * @return { Promise } promiseObject resolve({averageDiff: Number,isClear: Boolean,})\n\t * @description 检测图片的清晰度，返回一个promise，返回值为一个对象，包含averageDiff: Number,isClear: Boolean；averageDiff: 清晰度，isClear：是否清晰\n\t */\n\tconst checkDim = (url) => {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (env === \"wxapp\") {\n\t\t\t\twx.getImageInfo({\n\t\t\t\t\tsrc: url,\n\t\t\t\t\tsuccess: async (res) => {\n\t\t\t\t\t\t// 创建离屏canvas\n\t\t\t\t\t\tconst canvas = wx?.createOffscreenCanvas({\n\t\t\t\t\t\t\ttype: \"2d\",\n\t\t\t\t\t\t\twidth: res.width,\n\t\t\t\t\t\t\theight: res.height,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tconst context = canvas?.getContext(\"2d\");\n\t\t\t\t\t\tconst image = canvas?.createImage();\n\t\t\t\t\t\t// 等待图片加载\n\t\t\t\t\t\tawait new Promise((resolve) => {\n\t\t\t\t\t\t\timage.src = url; // 要加载的图片 url\n\t\t\t\t\t\t\timage.onload = resolve;\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tcontext.drawImage(image, 0, 0, res.width, res.height);\n\t\t\t\t\t\tconst imgData = context.getImageData(0, 0, res.width, res.height);\n\t\t\t\t\t\tconst data = imgData.data;\n\n\t\t\t\t\t\t// 计算图像的模糊程度\n\t\t\t\t\t\tlet totalDiff = 0;\n\t\t\t\t\t\tfor (let i = 0; i < data.length; i += 4) {\n\t\t\t\t\t\t\t// 计算像素的灰度值\n\t\t\t\t\t\t\tconst gray = (data[i] + data[i + 1] + data[i + 2]) / 3;\n\t\t\t\t\t\t\t// 计算像素与相邻像素的差值\n\t\t\t\t\t\t\tif (i > 0) {\n\t\t\t\t\t\t\t\tconst diff = Math.abs(\n\t\t\t\t\t\t\t\t\tgray - (data[i - 4] + data[i - 3] + data[i - 2]) / 3\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\ttotalDiff += diff;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// 计算平均差值\n\t\t\t\t\t\tconst averageDiff = totalDiff / (image.width * image.height);\n\t\t\t\t\t\t// 输出模糊程度\n\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\taverageDiff,\n\t\t\t\t\t\t\tisClear: averageDiff > 4,\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tfail: (error) => {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tconst image = new Image();\n\t\t\t\t\timage.src = url;\n\t\t\t\t\timage.onload = () => {\n\t\t\t\t\t\t// 创建Canvas元素\n\t\t\t\t\t\tconst canvas = document.createElement(\"canvas\");\n\t\t\t\t\t\tcanvas.width = image.width || image?.offsetWidth;\n\t\t\t\t\t\tcanvas.height = image.height || image?.offsetHeight;\n\t\t\t\t\t\tconst ctx = canvas.getContext(\"2d\");\n\t\t\t\t\t\tcanvas.width = image.width;\n\t\t\t\t\t\tcanvas.height = image.height;\n\t\t\t\t\t\tctx.drawImage(image, 0, 0, image.width, image.height);\n\n\t\t\t\t\t\t// 获取图像的像素数据\n\t\t\t\t\t\tconst imageData = ctx.getImageData(0, 0, image.width, image.height);\n\t\t\t\t\t\tconst data = imageData.data;\n\n\t\t\t\t\t\t// 计算图像的模糊程度\n\t\t\t\t\t\tlet totalDiff = 0;\n\t\t\t\t\t\tfor (let i = 0; i < data.length; i += 4) {\n\t\t\t\t\t\t\t// 计算像素的灰度值\n\t\t\t\t\t\t\tconst gray = (data[i] + data[i + 1] + data[i + 2]) / 3;\n\t\t\t\t\t\t\t// 计算像素与相邻像素的差值\n\t\t\t\t\t\t\tif (i > 0) {\n\t\t\t\t\t\t\t\tconst diff = Math.abs(\n\t\t\t\t\t\t\t\t\tgray - (data[i - 4] + data[i - 3] + data[i - 2]) / 3\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\ttotalDiff += diff;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// 计算平均差值\n\t\t\t\t\t\tconst averageDiff = totalDiff / (image.width * image.height);\n\t\t\t\t\t\t// 输出模糊程度\n\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\taverageDiff,\n\t\t\t\t\t\t\tisClear: averageDiff > 4,\n\t\t\t\t\t\t});\n\t\t\t\t\t};\n\t\t\t\t\timage.onerror = () => {\n\t\t\t\t\t\treject(new Error(\"图片加载失败\"));\n\t\t\t\t\t};\n\t\t\t\t} catch (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n\n\treturn {\n\t\tcheckLuminance, // 检测图像明暗\n\t\tcheckDim, // 检测图像模糊程度\n\t};\n};\n\nexport default imageDetect();\n"],"names":["trackingImage","pixels","width","height","fillRGBA","gray","Uint8ClampedArray","length","p","w","i","j","value","imageDetect$1","env","ua","window","navigator","userAgent","toLowerCase","isWeixin","indexOf","wx","Image","isInApp","test","__wxjs_environment","__wxAppCode__","getEnvironment","checkLuminance","url","Promise","resolve","reject","getImageInfo","src","success","async","res","canvas","createOffscreenCanvas","type","context","getContext","image","createImage","onload","drawImage","imgData","getImageData","grayscale","data","brightness","isGray","isBright","fail","error","document","createElement","offsetWidth","offsetHeight","onerror","Error","checkDim","totalDiff","Math","abs","averageDiff","isClear","ctx","err","imageDetect"],"mappings":"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"}